// path: prisma/schema.prisma 

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String   @db.VarChar(50)
  number    String?  @db.VarChar(50)
  city      String   @db.VarChar(50)
  zipCode   String   @db.VarChar(50)
  country   String   @db.VarChar(50)
  latitude  Float? // Latitude de l'adresse, stockée en Float
  longitude Float? // Longitude de l'adresse, stockée en Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Agency Agency?
  User   User[]

  @@map("addresses")
}

model Agency {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(50)
  location       String?  @db.VarChar(250)
  addressId      Int      @unique
  capacity       Int      @db.Integer // Capacité maximale pour stocker les colis
  availableSlots Int      @db.Integer // Nombre de places disponibles pour les rendez-vous ou dépôts
  Address        Address  @relation(fields: [addressId], references: [id])
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  ArrivalEnvoi   Envoi[]        @relation("ArrivalAgency")
  DepartureEnvoi Envoi[]        @relation("DepartureAgency")
  Notification   Notification[]
  Appointment    Appointment[]
  Tarifs         Tarifs[]

  @@map("agencies")
}

model Notification {
  id             Int      @id @default(autoincrement())
  message        String   @db.VarChar(255)
  envoisId       Int      @db.Integer
  agencyId       Int      @db.Integer
  userId         Int      @db.Integer
  destinataireId Int      @db.Integer
  envoiId        Int      @db.Integer
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Agency                   Agency @relation(fields: [agencyId], references: [id])
  Envoi                    Envoi  @relation(fields: [envoiId], references: [id])
  DestinataireNotification User   @relation("NotificationDestinataire", fields: [destinataireId], references: [id])
  User                     User   @relation("NotificationUser", fields: [userId], references: [id])

  @@map("notifications")
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String    @db.VarChar(50)
  lastName    String    @db.VarChar(50)
  dateOfBirth DateTime? @db.Timestamp(3)
  gender      String?   @db.VarChar(50)
  email       String    @unique @db.VarChar(150)
  phoneNumber String    @unique @db.VarChar(50)
  password    String?   @default("") @db.VarChar(255)
  imageUrl    String?   @default("") @db.VarChar(255)
  isVerified  Boolean?  @default(false)
  addressId   Int?
  role        Role      @default(CLIENT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Address     Address?  @relation(fields: [addressId], references: [id])

  sentEnvois                  Envoi[]        @relation("ClientEnvoi")
  receivedEnvois              Envoi[]        @relation("DestinataireEnvoi")
  notificationsAsUser         Notification[] @relation("NotificationUser")
  notificationsAsDestinataire Notification[] @relation("NotificationDestinataire")
  UserCoupon                  UserCoupon[]

  @@map("users")
}

enum Role {
  CLIENT
  ADMIN

  @@map("roles")
}

enum EnvoiStatus {
  PENDING
  SENT
  DELIVERED
  CANCELLED
  RETURNED

  @@map("envoi_status")
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  couponCode         String    @db.VarChar(50)
  discountAmount     Decimal   @db.Decimal(10, 2) // 10 chiffres au total, 2 chiffres après la virgule
  discountPercentage Decimal   @db.Decimal(5, 2) // 5 chiffres au total, 2 chiffres après la virgule
  numberOfUses       Int
  startDate          DateTime  @db.Timestamp(3)
  expirationDate     DateTime? @db.Timestamp(3)
  termsAndConditions String?   @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  UserCoupon  UserCoupon[]
  EnvoiCoupon EnvoiCoupon[]

  @@map("coupons")
}

model UserCoupon {
  userId   Int
  couponId Int

  User   User   @relation(fields: [userId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId])
  @@map("user_coupons")
}

model Transport {
  id                Int                 @id @default(autoincrement())
  number            String              @db.VarChar(15)
  baseVolume        Decimal             @db.Decimal(12, 2) // Augmentation de la précision
  baseWeight        Decimal             @db.Decimal(10, 2) // Augmentation de la précision
  currentVolume     Decimal             @db.Decimal(12, 2) // Augmentation de la précision
  currentWeight     Decimal             @db.Decimal(10, 2) // Augmentation de la précision
  isAvailable       Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Envoi             Envoi[]
  TransportSchedule TransportSchedule[]
}

model Envoi {
  id                Int         @id @default(autoincrement())
  trackingNumber    String      @unique @db.VarChar(50)
  qrCodeUrl         String?     @db.VarChar(255) // URL du QR code pour le dépôt en agence
  clientId          Int
  dateSent          DateTime    @db.Timestamp(3)
  departureAgencyId Int
  dateDelivered     DateTime    @db.Timestamp(3)
  arrivalAgencyId   Int
  status            EnvoiStatus @default(PENDING)
  totalWeight       Decimal     @db.Decimal(5, 2)
  totalVolume       Decimal     @db.Decimal(5, 2)
  totalPrice        Decimal     @db.Decimal(5, 2)
  comment           String?     @db.Text()
  transportId       Int
  destinataireId    Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  ArrivalAgency   Agency    @relation("ArrivalAgency", fields: [arrivalAgencyId], references: [id])
  DepartureAgency Agency    @relation("DepartureAgency", fields: [departureAgencyId], references: [id])
  Transport       Transport @relation(fields: [transportId], references: [id])

  Destinataire User           @relation("DestinataireEnvoi", fields: [destinataireId], references: [id])
  Client       User           @relation("ClientEnvoi", fields: [clientId], references: [id])
  EnvoiCoupon  EnvoiCoupon[]
  Parcel       Parcel[]
  Appointment  Appointment?
  Notification Notification[]

  @@map("envois")
}

model Appointment {
  id        Int               @id @default(autoincrement())
  envoiId   Int               @unique
  agencyId  Int
  date      DateTime          @db.Timestamp(3)
  status    AppointmentStatus @default(PENDING) // Statuts possibles : PENDING, CONFIRMED, CANCELLED
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Agency Agency @relation(fields: [agencyId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
  MISSED
  IN_PROGRESS
}

model EnvoiCoupon {
  envoiId  Int
  couponId Int

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([envoiId, couponId])
  @@map("envoi_coupons")
}

model Parcel {
  id        Int      @id @default(autoincrement())
  height    Decimal  @db.Decimal(5, 2)
  volume    Decimal  @db.Decimal(5, 2)
  weight    Decimal  @db.Decimal(5, 2)
  width     Decimal  @db.Decimal(5, 2)
  length    Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  envoiId   Int
  Envoi     Envoi    @relation(fields: [envoiId], references: [id])

  @@map("parcels")
}

model Tarifs {
  id         Int      @id @default(autoincrement())
  agencyId   Int?
  weightRate Decimal  @db.Decimal(5, 2)
  volumeRate Decimal  @db.Decimal(5, 2)
  baseRate   Decimal  @db.Decimal(5, 2)
  fixedRate  Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Agency Agency? @relation(fields: [agencyId], references: [id])

  @@map("tarifs")
}

model TransportSchedule {
  id            Int      @id @default(autoincrement())
  transportId   Int
  departureDate DateTime @db.Timestamp(3)
  arrivalDate   DateTime @db.Timestamp(3)
  isHoliday     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Transport Transport @relation(fields: [transportId], references: [id])

  @@map("transport_schedules")
}
