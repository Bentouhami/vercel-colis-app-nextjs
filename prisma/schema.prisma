datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  number    String
  city      String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Agency Agency?
  User   User[]
}

model Agency {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  addressId Int      @unique
  Address   Address  @relation(fields: [addressId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  ArrivalEnvoi   Envoi[] @relation("ArrivalAgency")
  DepartureEnvoi Envoi[] @relation("DepartureAgency")
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  gender      Boolean?  @default(false) @db.Boolean
  phoneNumber String
  email       String    @unique
  password    String    @default("")
  addressId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Address     Address   @relation(fields: [addressId], references: [id])
  role        UserRole  @default(USER)

  ClientEnvoi      Envoi[]      @relation("ClientEnvoi")
  DestinatireEnvoi Envoi[]      @relation("DestinatireEnvoi")
  UserCoupon       UserCoupon[]
}

enum UserRole {
  USER
  CLIENT
  DESTINATAIRE
  ADMIN
}

model Coupon {
  id                 Int      @id @default(autoincrement())
  couponCode         String
  discountAmount     Float
  discountPercentage Float
  numberOfUses       Int
  startDate          DateTime
  expirationDate     DateTime
  termsAndConditions String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  UserCoupon  UserCoupon[]
  EnvoiCoupon EnvoiCoupon[]
}

model UserCoupon {
  userId   Int
  couponId Int

  User   User   @relation(fields: [userId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId])
}

model Transport {
  id            Int      @id @default(autoincrement())
  number        String
  baseVolume    Float
  baseWeight    Float
  currentVolume Float
  currentWeight Float
  isAvailable   Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Envoi Envoi[]
}

model Envoi {
  id                Int      @id @default(autoincrement())
  trackingNumber    String   @unique
  clientId          Int
  destinationId     Int
  dateSent          DateTime
  departureAgencyId Int
  dateDelivered     DateTime
  arrivalAgencyId   Int
  status            String
  totalWeight       Float
  totalVolume       Float
  totalPrice        Float
  transportId       Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  ArrivalAgency   Agency    @relation("ArrivalAgency", fields: [arrivalAgencyId], references: [id])
  Client          User      @relation("ClientEnvoi", fields: [clientId], references: [id])
  DepartureAgency Agency    @relation("DepartureAgency", fields: [departureAgencyId], references: [id])
  Destinatire     User      @relation("DestinatireEnvoi", fields: [destinationId], references: [id])
  Transport       Transport @relation(fields: [transportId], references: [id])

  EnvoiCoupon EnvoiCoupon[]
  Parcel      Parcel[]
}

model EnvoiCoupon {
  envoiId  Int
  couponId Int

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([envoiId, couponId])
}

model Parcel {
  id        Int      @id @default(autoincrement())
  height    Float
  volume    Float
  weight    Float
  width     Float
  length    Float
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  envoiId   Int
  Envoi     Envoi    @relation(fields: [envoiId], references: [id])
}
