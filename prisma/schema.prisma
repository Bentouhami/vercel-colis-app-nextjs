// path: prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// User models

model User {
  id          Int       @id @default(autoincrement())
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  name        String?
  birthDate   DateTime? @db.Timestamp(3)
  email       String    @unique @db.VarChar(150)
  phoneNumber String?   @unique @db.VarChar(50)
  password    String?   @default("") @db.VarChar(255)
  image       String?   @default("") @db.VarChar(255)
  roles       Role[]    @default([CLIENT]) // Default to CLIENT role for new users
  agencyId    Int? // New field to link admins to specific agencies

  isVerified               Boolean?  @default(false) // Indique si l'utilisateur a vérifié son email
  emailVerified            DateTime? // Date de vérification de l'email
  verificationToken        String?   @unique @db.VarChar(255) // Token de vérification de l'email
  verificationTokenExpires DateTime? // Date d'expiration du token de vérification de l'email

  addressId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address?  @relation(fields: [addressId], references: [id])
  accounts  Account[]
  sessions  Session[]

  // Relations
  sentEnvois                  Envoi[]         @relation("ClientEnvoi")
  receivedEnvois              Envoi[]         @relation("DestinataireEnvoi")
  notificationsAsUser         Notification[]  @relation("NotificationUser")
  notificationsAsDestinataire Notification[]  @relation("NotificationDestinataire")
  UserCoupon                  UserCoupon[]
  Authenticator               Authenticator[]

  clientLinks       ClientDestinataire[] @relation("Client")
  destinataireLinks ClientDestinataire[] @relation("Destinataire")

  // Nouvelles relations pour la gestion des simulations
  createdSimulations  Simulation[] @relation("ClientSimulations")
  receivedSimulations Simulation[] @relation("DestinataireSimulations")

  // New relations for agency admins to manage their agencies
  managedAgencies Agency[] @relation("AgencyAdmins")
  clientAgencies  Agency[] @relation("AgencyClients") // For CLIENT or DESTINATAIRE roles

  @@map("users")
}

enum Role {
  CLIENT
  ADMIN
  DESTINATAIRE
  AGENCY_ADMIN

  @@map("roles")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Notification {
  id             Int      @id @default(autoincrement())
  message        String   @db.VarChar(255)
  envoisId       Int      @db.Integer
  agencyId       Int      @db.Integer
  userId         Int      @db.Integer
  destinataireId Int      @db.Integer
  envoiId        Int      @db.Integer
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations

  Agency                   Agency @relation(fields: [agencyId], references: [id])
  Envoi                    Envoi  @relation(fields: [envoiId], references: [id])
  DestinataireNotification User   @relation("NotificationDestinataire", fields: [destinataireId], references: [id])
  User                     User   @relation("NotificationUser", fields: [userId], references: [id])

  @@map("notifications")
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String   @db.VarChar(50)
  number    String?  @db.VarChar(50)
  city      String   @db.VarChar(50)
  zipCode   String   @db.VarChar(50)
  country   String   @db.VarChar(50)
  latitude  Float? // Latitude de l'adresse, stockée en Float
  longitude Float? // Longitude de l'adresse, stockée en Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  Agency Agency?
  User   User[]

  @@map("addresses")
}

model Agency {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(50)
  location       String?  @db.VarChar(250)
  addressId      Int      @unique
  capacity       Int      @db.Integer // maximum capacity for storing parcels
  availableSlots Int      @db.Integer // number of available slots for appointments or deliveries
  address        Address  @relation(fields: [addressId], references: [id])
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  // Relations

  ArrivalEnvoi   Envoi[]        @relation("ArrivalAgency") // arrival agency envoi
  DepartureEnvoi Envoi[]        @relation("DepartureAgency") // departure agency envoi
  Notification   Notification[] // notifications for the agency
  Appointment    Appointment[] // appointments for the agency
  Tarifs         Tarifs[] // tarifs for the agency
  // Optional admins relation allowing zero admins
  admins         User[]         @relation("AgencyAdmins")
  Clients        User[]         @relation("AgencyClients") // For CLIENT or DESTINATAIRE roles

  @@map("agencies")
}

enum SimulationStatus {
  DRAFT
  CONFIRMED
  COMPLETED
  CANCELLED

  @@map("simulation_status")
}

model Simulation {
  id                 Int               @id @default(autoincrement())
  userId             Int? // Référence à l'ID de l'utilisateur qui effectue la simulation
  destinataireId     Int? // Référence à l'ID du destinataire
  departureCountry   String
  departureCity      String
  departureAgency    String
  destinationCountry String
  destinationCity    String
  destinationAgency  String
  parcels            Json              @db.Json
  status             SimulationStatus? @default(DRAFT)
  totalWeight        Float
  totalVolume        Float
  totalPrice         Float?
  departureDate      DateTime
  arrivalDate        DateTime
  verificationToken  String            @unique @default(uuid()) @db.Uuid
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  client       User? @relation("ClientSimulations", fields: [userId], references: [id])
  destinataire User? @relation("DestinataireSimulations", fields: [destinataireId], references: [id])

  @@map("simulations")
}

model ClientDestinataire {
  id             Int      @id @default(autoincrement())
  clientId       Int // Référence au (client) l'utilisateur qui effectue la simulation
  destinataireId Int // Référence au destinataire (utilisateur qui va récupérer l'envoi)
  createdAt      DateTime @default(now())

  // Relations
  client       User @relation("Client", fields: [clientId], references: [id]) //
  destinataire User @relation("Destinataire", fields: [destinataireId], references: [id])

  @@unique([clientId, destinataireId]) // Empêche un client d'ajouter deux fois le même destinataire
  @@map("clients_destinataires")
}

enum EnvoiStatus {
  PENDING
  SENT
  DELIVERED
  CANCELLED
  RETURNED

  @@map("envoi_status")
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  couponCode         String    @db.VarChar(50)
  discountAmount     Decimal   @db.Decimal(10, 2) // 10 chiffres au total, 2 chiffres après la virgule
  discountPercentage Decimal   @db.Decimal(5, 2) // 5 chiffres au total, 2 chiffres après la virgule
  numberOfUses       Int
  startDate          DateTime  @db.Timestamp(3)
  expirationDate     DateTime? @db.Timestamp(3)
  termsAndConditions String?   @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations

  UserCoupon  UserCoupon[]
  EnvoiCoupon EnvoiCoupon[]

  @@map("coupons")
}

model UserCoupon {
  userId   Int
  couponId Int

  // Relations

  User   User   @relation(fields: [userId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId])
  @@map("user_coupons")
}

model Transport {
  id            Int      @id @default(autoincrement())
  number        String   @db.VarChar(15)
  baseVolume    Decimal  @db.Decimal(12, 2) // Augmentation de la précision
  baseWeight    Decimal  @db.Decimal(10, 2) // Augmentation de la précision
  currentVolume Decimal  @db.Decimal(12, 2) // Augmentation de la précision
  currentWeight Decimal  @db.Decimal(10, 2) // Augmentation de la précision
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations

  Envoi             Envoi[]
  TransportSchedule TransportSchedule[]

  @@map("transports")
}

model Envoi {
  id                Int         @id @default(autoincrement())
  trackingNumber    String      @unique @db.VarChar(50)
  qrCodeUrl         String?     @db.VarChar(255) // URL du QR code pour le dépôt en agence
  clientId          Int
  dateSent          DateTime    @db.Timestamp(3)
  departureAgencyId Int
  dateDelivered     DateTime    @db.Timestamp(3)
  arrivalAgencyId   Int
  status            EnvoiStatus @default(PENDING)
  totalWeight       Decimal     @db.Decimal(5, 2)
  totalVolume       Decimal     @db.Decimal(5, 2)
  totalPrice        Decimal     @db.Decimal(5, 2)
  comment           String?     @db.Text()
  transportId       Int
  destinataireId    Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations

  ArrivalAgency   Agency    @relation("ArrivalAgency", fields: [arrivalAgencyId], references: [id])
  DepartureAgency Agency    @relation("DepartureAgency", fields: [departureAgencyId], references: [id])
  Transport       Transport @relation(fields: [transportId], references: [id])

  Destinataire User           @relation("DestinataireEnvoi", fields: [destinataireId], references: [id])
  Client       User           @relation("ClientEnvoi", fields: [clientId], references: [id])
  EnvoiCoupon  EnvoiCoupon[]
  Parcel       Parcel[]
  Appointment  Appointment?
  Notification Notification[]

  @@map("envois")
}

model Appointment {
  id        Int               @id @default(autoincrement())
  envoiId   Int               @unique
  agencyId  Int
  date      DateTime          @db.Timestamp(3)
  status    AppointmentStatus @default(PENDING) // Statuts possibles : PENDING, CONFIRMED, CANCELLED
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Agency Agency @relation(fields: [agencyId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
  MISSED
  IN_PROGRESS

  @@map("appointment_status")
}

model EnvoiCoupon {
  envoiId  Int
  couponId Int

  // Relations

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([envoiId, couponId])
  @@map("envoi_coupons")
}

model Parcel {
  id        Int      @id @default(autoincrement())
  height    Decimal  @db.Decimal(5, 2)
  volume    Decimal  @db.Decimal(5, 2)
  weight    Decimal  @db.Decimal(5, 2)
  width     Decimal  @db.Decimal(5, 2)
  length    Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  envoiId   Int

  // Relations

  Envoi Envoi @relation(fields: [envoiId], references: [id])

  @@map("parcels")
}

model Tarifs {
  id         Int      @id @default(autoincrement())
  agencyId   Int?
  weightRate Decimal  @db.Decimal(5, 2)
  volumeRate Decimal  @db.Decimal(5, 2)
  baseRate   Decimal  @db.Decimal(5, 2)
  fixedRate  Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations

  Agency Agency? @relation(fields: [agencyId], references: [id])

  @@map("tarifs")
}

model TransportSchedule {
  id            Int      @id @default(autoincrement())
  transportId   Int
  departureDate DateTime @db.Timestamp(3)
  arrivalDate   DateTime @db.Timestamp(3)
  isHoliday     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations

  Transport Transport @relation(fields: [transportId], references: [id])

  @@map("transport_schedules")
}
