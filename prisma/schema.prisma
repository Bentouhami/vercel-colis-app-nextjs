datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  number    String?
  city      String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Agency Agency?
  User   User[]

  @@map("addresses")
}

model Agency {
  id             Int      @id @default(autoincrement())
  name           String
  location       String?
  addressId      Int      @unique
  capacity       Int // Capacité maximale pour stocker les colis
  availableSlots Int // Nombre de places disponibles pour les rendez-vous ou dépôts
  Address        Address  @relation(fields: [addressId], references: [id])
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  ArrivalEnvoi   Envoi[]        @relation("ArrivalAgency")
  DepartureEnvoi Envoi[]        @relation("DepartureAgency")
  Notification   Notification[]
  Appointment    Appointment[]
  Tarifs         Tarifs[]

  @@map("agencies")
}

model Notification {
  id             Int      @id @default(autoincrement())
  message        String
  envoisId       Int
  agencyId       Int
  userId         Int
  destinataireId Int
  envoiId        Int
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Agency                   Agency @relation(fields: [agencyId], references: [id])
  Envoi                    Envoi  @relation(fields: [envoiId], references: [id])
  DestinataireNotification User   @relation("NotificationDestinataire", fields: [destinataireId], references: [id])
  User                     User   @relation("NotificationUser", fields: [userId], references: [id])

  @@map("notifications")
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  gender      String?
  email       String    @unique
  phoneNumber String    @unique
  password    String?   @default("")
  imageUrl    String?   @default("")
  isVerified  Boolean?  @default(false)
  addressId   Int?
  role        Role      @default(CLIENT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Address     Address?  @relation(fields: [addressId], references: [id])

  sentEnvois                  Envoi[]        @relation("ClientEnvoi")
  receivedEnvois              Envoi[]        @relation("DestinataireEnvoi")
  notificationsAsUser         Notification[] @relation("NotificationUser")
  notificationsAsDestinataire Notification[] @relation("NotificationDestinataire")
  UserCoupon                  UserCoupon[]

  @@map("users")
}

enum Role {
  CLIENT
  ADMIN

  @@map("roles")
}

enum EnvoiStatus {
  PENDING
  SENT
  DELIVERED
  CANCELLED
  RETURNED

  @@map("envoi_status")
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  couponCode         String
  discountAmount     Float
  discountPercentage Float
  numberOfUses       Int
  startDate          DateTime
  expirationDate     DateTime?
  termsAndConditions String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  UserCoupon  UserCoupon[]
  EnvoiCoupon EnvoiCoupon[]

  @@map("coupons")
}

model UserCoupon {
  userId   Int
  couponId Int

  User   User   @relation(fields: [userId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId])
  @@map("user_coupons")
}

model Transport {
  id            Int      @id @default(autoincrement())
  number        String // Numéro de la camion de transport
  baseVolume    Float
  baseWeight    Float
  currentVolume Float
  currentWeight Float
  isAvailable   Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Envoi             Envoi[]
  TransportSchedule TransportSchedule[]

  @@map("transports")
}

model Envoi {
  id                Int         @id @default(autoincrement())
  trackingNumber    String      @unique
  qrCodeUrl         String? // URL du QR code pour le dépôt en agence
  clientId          Int
  dateSent          DateTime
  departureAgencyId Int
  dateDelivered     DateTime
  arrivalAgencyId   Int
  status            EnvoiStatus @default(PENDING)
  totalWeight       Float
  totalVolume       Float
  totalPrice        Float
  comment           String?     @db.Text()
  transportId       Int
  destinataireId    Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  ArrivalAgency   Agency    @relation("ArrivalAgency", fields: [arrivalAgencyId], references: [id])
  DepartureAgency Agency    @relation("DepartureAgency", fields: [departureAgencyId], references: [id])
  Transport       Transport @relation(fields: [transportId], references: [id])

  Destinataire User           @relation("DestinataireEnvoi", fields: [destinataireId], references: [id])
  Client       User           @relation("ClientEnvoi", fields: [clientId], references: [id])
  EnvoiCoupon  EnvoiCoupon[]
  Parcel       Parcel[]
  Appointment  Appointment?
  Notification Notification[]

  @@map("envois")
}

model Appointment {
  id        Int      @id @default(autoincrement())
  envoiId   Int      @unique
  agencyId  Int
  date      DateTime
  status    String   @default("PENDING") // Statuts possibles : PENDING, CONFIRMED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Agency Agency @relation(fields: [agencyId], references: [id])

  @@map("appointments")
}

model EnvoiCoupon {
  envoiId  Int
  couponId Int

  Envoi  Envoi  @relation(fields: [envoiId], references: [id])
  Coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([envoiId, couponId])
  @@map("envoi_coupons")
}

model Parcel {
  id        Int      @id @default(autoincrement())
  height    Float
  volume    Float
  weight    Float
  width     Float
  length    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  envoiId   Int
  Envoi     Envoi    @relation(fields: [envoiId], references: [id])

  @@map("parcels")
}

model Tarifs {
  id         Int      @id @default(autoincrement())
  agencyId   Int?
  weightRate Float
  volumeRate Float
  baseRate   Float
  fixedRate  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Agency Agency? @relation(fields: [agencyId], references: [id])

  @@map("tarifs")
}

model TransportSchedule {
  id            Int      @id @default(autoincrement())
  transportId   Int
  departureDate DateTime
  arrivalDate   DateTime
  isHoliday     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Transport Transport @relation(fields: [transportId], references: [id])

  @@map("transport_schedules")
}
