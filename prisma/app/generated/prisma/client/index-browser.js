
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expiresAt: 'expiresAt',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  envoiId: 'envoiId',
  method: 'method',
  status: 'status',
  amount: 'amount',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  birthDate: 'birthDate',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  image: 'image',
  role: 'role',
  isVerified: 'isVerified',
  emailVerified: 'emailVerified',
  verificationToken: 'verificationToken',
  verificationTokenExpires: 'verificationTokenExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isEnterprise: 'isEnterprise',
  lastLogin: 'lastLogin'
};

exports.Prisma.AccountScalarFieldEnum = {
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyClientsScalarFieldEnum = {
  clientId: 'clientId',
  agencyId: 'agencyId'
};

exports.Prisma.AgencyStaffScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  agencyId: 'agencyId',
  staffRole: 'staffRole'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  activityType: 'activityType',
  staffId: 'staffId',
  agencyId: 'agencyId',
  details: 'details',
  staffRole: 'staffRole',
  createdAt: 'createdAt'
};

exports.Prisma.AuthenticatorScalarFieldEnum = {
  credentialID: 'credentialID',
  userId: 'userId',
  providerAccountId: 'providerAccountId',
  credentialPublicKey: 'credentialPublicKey',
  counter: 'counter',
  credentialDeviceType: 'credentialDeviceType',
  credentialBackedUp: 'credentialBackedUp',
  transports: 'transports'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  message: 'message',
  agencyId: 'agencyId',
  destinataireId: 'destinataireId',
  clientId: 'clientId',
  envoiId: 'envoiId',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VatRateScalarFieldEnum = {
  id: 'id',
  countryId: 'countryId',
  itemClassId: 'itemClassId',
  vatPercent: 'vatPercent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vatType: 'vatType'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  latitude: 'latitude',
  longitude: 'longitude',
  countryId: 'countryId'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  iso2: 'iso2',
  iso3: 'iso3',
  phonecode: 'phonecode',
  capital: 'capital',
  currency: 'currency',
  latitude: 'latitude',
  longitude: 'longitude',
  emoji: 'emoji'
};

exports.Prisma.TimezoneScalarFieldEnum = {
  id: 'id',
  zoneName: 'zoneName',
  gmtOffset: 'gmtOffset',
  abbreviation: 'abbreviation',
  countryId: 'countryId'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressId: 'addressId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  addressType: 'addressType'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  complement: 'complement',
  streetNumber: 'streetNumber',
  boxNumber: 'boxNumber',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  phoneNumber: 'phoneNumber',
  email: 'email',
  vatNumber: 'vatNumber',
  addressId: 'addressId',
  capacity: 'capacity',
  availableSlots: 'availableSlots',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  createdById: 'createdById'
};

exports.Prisma.ClientDestinataireScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  destinataireId: 'destinataireId',
  createdAt: 'createdAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  couponCode: 'couponCode',
  discountAmount: 'discountAmount',
  discountPercentage: 'discountPercentage',
  numberOfUses: 'numberOfUses',
  startDate: 'startDate',
  expirationDate: 'expirationDate',
  termsAndConditions: 'termsAndConditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCouponScalarFieldEnum = {
  userId: 'userId',
  couponId: 'couponId'
};

exports.Prisma.TransportScalarFieldEnum = {
  id: 'id',
  number: 'number',
  baseVolume: 'baseVolume',
  baseWeight: 'baseWeight',
  currentVolume: 'currentVolume',
  currentWeight: 'currentWeight',
  isAvailable: 'isAvailable',
  agencyId: 'agencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnvoiScalarFieldEnum = {
  id: 'id',
  trackingNumber: 'trackingNumber',
  qrCodeUrl: 'qrCodeUrl',
  userId: 'userId',
  destinataireId: 'destinataireId',
  transportId: 'transportId',
  departureAgencyId: 'departureAgencyId',
  arrivalAgencyId: 'arrivalAgencyId',
  simulationStatus: 'simulationStatus',
  envoiStatus: 'envoiStatus',
  totalWeight: 'totalWeight',
  totalVolume: 'totalVolume',
  totalPrice: 'totalPrice',
  paid: 'paid',
  departureDate: 'departureDate',
  arrivalDate: 'arrivalDate',
  verificationToken: 'verificationToken',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrackingEventScalarFieldEnum = {
  id: 'id',
  envoiId: 'envoiId',
  eventStatus: 'eventStatus',
  location: 'location',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  envoiId: 'envoiId',
  agencyId: 'agencyId',
  date: 'date',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnvoiCouponScalarFieldEnum = {
  envoiId: 'envoiId',
  couponId: 'couponId'
};

exports.Prisma.ParcelScalarFieldEnum = {
  id: 'id',
  envoiId: 'envoiId',
  height: 'height',
  weight: 'weight',
  width: 'width',
  length: 'length',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TarifsScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  weightRate: 'weightRate',
  volumeRate: 'volumeRate',
  baseRate: 'baseRate',
  fixedRate: 'fixedRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransportScheduleScalarFieldEnum = {
  id: 'id',
  transportId: 'transportId',
  departureDate: 'departureDate',
  arrivalDate: 'arrivalDate',
  isHoliday: 'isHoliday',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CARD: 'CARD',
  CASH: 'CASH'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED'
};

exports.Role = exports.$Enums.Role = {
  CLIENT: 'CLIENT',
  SUPER_ADMIN: 'SUPER_ADMIN',
  DESTINATAIRE: 'DESTINATAIRE',
  AGENCY_ADMIN: 'AGENCY_ADMIN',
  ACCOUNTANT: 'ACCOUNTANT'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  AGENCY_CREATED: 'AGENCY_CREATED',
  AGENCY_UPDATED: 'AGENCY_UPDATED',
  AGENCY_DELETED: 'AGENCY_DELETED',
  CLIENT_LINKED: 'CLIENT_LINKED',
  CLIENT_UNLINKED: 'CLIENT_UNLINKED',
  CLIENT_UPDATED: 'CLIENT_UPDATED',
  CLIENT_DELETED: 'CLIENT_DELETED',
  CLIENT_CREATED: 'CLIENT_CREATED',
  ENVOI_CREATED: 'ENVOI_CREATED',
  ENVOI_UPDATED: 'ENVOI_UPDATED',
  ENVOI_DELETED: 'ENVOI_DELETED',
  PAYMENT_CREATED: 'PAYMENT_CREATED',
  PAYMENT_UPDATED: 'PAYMENT_UPDATED',
  PAYMENT_DELETED: 'PAYMENT_DELETED',
  TRACKING_EVENT_CREATED: 'TRACKING_EVENT_CREATED',
  TRACKING_EVENT_UPDATED: 'TRACKING_EVENT_UPDATED',
  TRACKING_EVENT_DELETED: 'TRACKING_EVENT_DELETED',
  APPOINTMENT_CREATED: 'APPOINTMENT_CREATED',
  APPOINTMENT_UPDATED: 'APPOINTMENT_UPDATED',
  APPOINTMENT_DELETED: 'APPOINTMENT_DELETED',
  NOTIFICATION_CREATED: 'NOTIFICATION_CREATED',
  NOTIFICATION_UPDATED: 'NOTIFICATION_UPDATED',
  NOTIFICATION_DELETED: 'NOTIFICATION_DELETED',
  AGENCY_ADMIN_ADDED: 'AGENCY_ADMIN_ADDED',
  AGENCY_ADMIN_REMOVED: 'AGENCY_ADMIN_REMOVED',
  ACCOUNTANT_ADDED: 'ACCOUNTANT_ADDED',
  ACCOUNTANT_REMOVED: 'ACCOUNTANT_REMOVED',
  SUPER_ADMIN_ADDED: 'SUPER_ADMIN_ADDED',
  SUPER_ADMIN_REMOVED: 'SUPER_ADMIN_REMOVED',
  TRANSPORT_CREATED: 'TRANSPORT_CREATED',
  TRANSPORT_UPDATED: 'TRANSPORT_UPDATED',
  TRANSPORT_DELETED: 'TRANSPORT_DELETED',
  TARIF_CREATED: 'TARIF_CREATED',
  TARIF_UPDATED: 'TARIF_UPDATED',
  TARIF_DELETED: 'TARIF_DELETED',
  PDF_EXPORTED: 'PDF_EXPORTED',
  CSV_EXPORTED: 'CSV_EXPORTED'
};

exports.VatType = exports.$Enums.VatType = {
  REDUCED: 'REDUCED',
  STANDARD: 'STANDARD',
  EXEMPT: 'EXEMPT'
};

exports.AddressType = exports.$Enums.AddressType = {
  HOME: 'HOME',
  OFFICE: 'OFFICE',
  BILLING: 'BILLING',
  SHIPPING: 'SHIPPING',
  OTHER: 'OTHER'
};

exports.SimulationStatus = exports.$Enums.SimulationStatus = {
  DRAFT: 'DRAFT',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.EnvoiStatus = exports.$Enums.EnvoiStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  RETURNED: 'RETURNED'
};

exports.TrackingEventStatus = exports.$Enums.TrackingEventStatus = {
  CREATED: 'CREATED',
  COLLECTED: 'COLLECTED',
  IN_TRANSIT: 'IN_TRANSIT',
  ARRIVED_AT_AGENCY: 'ARRIVED_AT_AGENCY',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  RESCHEDULED: 'RESCHEDULED',
  COMPLETED: 'COMPLETED',
  MISSED: 'MISSED',
  IN_PROGRESS: 'IN_PROGRESS'
};

exports.Prisma.ModelName = {
  PasswordResetToken: 'PasswordResetToken',
  Payment: 'Payment',
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  AgencyClients: 'AgencyClients',
  AgencyStaff: 'AgencyStaff',
  ActivityLog: 'ActivityLog',
  Authenticator: 'Authenticator',
  Notification: 'Notification',
  VatRate: 'VatRate',
  City: 'City',
  Country: 'Country',
  Timezone: 'Timezone',
  UserAddress: 'UserAddress',
  Address: 'Address',
  Agency: 'Agency',
  ClientDestinataire: 'ClientDestinataire',
  Coupon: 'Coupon',
  UserCoupon: 'UserCoupon',
  Transport: 'Transport',
  Envoi: 'Envoi',
  TrackingEvent: 'TrackingEvent',
  Appointment: 'Appointment',
  EnvoiCoupon: 'EnvoiCoupon',
  Parcel: 'Parcel',
  Tarifs: 'Tarifs',
  TransportSchedule: 'TransportSchedule'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
