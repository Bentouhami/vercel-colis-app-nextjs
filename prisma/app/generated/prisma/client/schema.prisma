// path: src/lib/prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

//
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "app/generated/prisma/client"
}

enum PaymentMethod {
  CARD
  CASH

  @@map("payment_method")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED

  @@map("payment_status")
}

enum Role {
  CLIENT
  SUPER_ADMIN
  DESTINATAIRE
  AGENCY_ADMIN
  ACCOUNTANT

  @@map("roles")
}

enum VatType {
  REDUCED
  STANDARD
  EXEMPT

  @@map("vat_types")
}

enum AddressType {
  HOME
  OFFICE
  BILLING
  SHIPPING
  OTHER

  @@map("address_types")
}

enum SimulationStatus {
  DRAFT
  CONFIRMED
  COMPLETED
  CANCELLED

  @@map("simulation_status")
}

enum EnvoiStatus {
  PENDING
  SENT
  DELIVERED
  CANCELLED
  RETURNED

  @@map("envoi_status")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
  MISSED
  IN_PROGRESS

  @@map("appointment_status")
}

enum TrackingEventStatus {
  CREATED
  COLLECTED
  IN_TRANSIT
  ARRIVED_AT_AGENCY
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model Payment {
  id            Int           @id @default(autoincrement())
  envoiId       Int           @unique
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  amount        Float
  transactionId String?       @unique // utile pour Stripe (paiement par carte)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  envoi Envoi @relation(fields: [envoiId], references: [id])

  @@map("payments")
}

// User models
model User {
  id          Int       @id @default(autoincrement())
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  name        String?
  birthDate   DateTime? @db.Timestamp(3)
  email       String    @unique @db.VarChar(150)
  phoneNumber String?   @unique @db.VarChar(50)
  password    String?   @default("") @db.VarChar(255)
  image       String?   @default("") @db.VarChar(255)
  role        Role      @default(CLIENT) // Default to CLIENT role for new users

  isVerified               Boolean?  @default(false) // Indique si l'utilisateur a vÃ©rifiÃ© son email
  emailVerified            DateTime? // Date de vÃ©rification de l'email
  verificationToken        String?   @unique @db.VarChar(255) // Token de vÃ©rification
  verificationTokenExpires DateTime? // Date d'expiration du token
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  isEnterprise Boolean   @default(false)
  lastLogin    DateTime?

  // Account relations
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]

  // Envoi relations
  sentEnvois     Envoi[] @relation("ClientEnvoi") // Envois envoyÃ©s par le client
  receivedEnvois Envoi[] @relation("DestinataireEnvoi") // Envois reÃ§us par le destinataire

  // Relations
  notificationsAsDestinataire Notification[] @relation("NotificationDestinataire") // Notifications reÃ§ues par le destinataire
  notificationAsClient        Notification[] @relation("NotificationClient") // Notifications reÃ§ues par le client

  // UserCoupon relations
  userCoupons UserCoupon[]

  // Client/ Destinataire links
  clientLinks       ClientDestinataire[] @relation("Client")
  destinataireLinks ClientDestinataire[] @relation("Destinataire")

  // Agency admin relations
  clientAgencies AgencyClients[]
  agencyStaffs   AgencyStaff[]

  // UserAddress relations
  userAddresses      UserAddress[]
  createdAgencies    Agency[]
  staffsActivityLogs ActivityLog[]

  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model AgencyClients {
  client   User   @relation(fields: [clientId], references: [id])
  clientId Int
  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId Int

  @@id([clientId, agencyId])
  @@map("agency_clients")
}

enum ActivityType {
  AGENCY_CREATED
  AGENCY_UPDATED
  AGENCY_DELETED
  CLIENT_LINKED
  CLIENT_UNLINKED
  CLIENT_UPDATED
  CLIENT_DELETED
  CLIENT_CREATED
  ENVOI_CREATED
  ENVOI_UPDATED
  ENVOI_DELETED
  PAYMENT_CREATED
  PAYMENT_UPDATED
  PAYMENT_DELETED
  TRACKING_EVENT_CREATED
  TRACKING_EVENT_UPDATED
  TRACKING_EVENT_DELETED
  APPOINTMENT_CREATED
  APPOINTMENT_UPDATED
  APPOINTMENT_DELETED
  NOTIFICATION_CREATED
  NOTIFICATION_UPDATED
  NOTIFICATION_DELETED
  AGENCY_ADMIN_ADDED
  AGENCY_ADMIN_REMOVED
  ACCOUNTANT_ADDED
  ACCOUNTANT_REMOVED
  SUPER_ADMIN_ADDED
  SUPER_ADMIN_REMOVED
  TRANSPORT_CREATED
  TRANSPORT_UPDATED
  TRANSPORT_DELETED
  TARIF_CREATED
  TARIF_UPDATED
  TARIF_DELETED
  PDF_EXPORTED
  CSV_EXPORTED

  @@map("activity_types")
}

model AgencyStaff {
  id        Int  @id @default(autoincrement())
  staffId   Int
  agencyId  Int
  staffRole Role

  staff  User   @relation(fields: [staffId], references: [id])
  agency Agency @relation(fields: [agencyId], references: [id])

  @@unique([staffId, agencyId, staffRole])
  @@map("agency_staff")
}

model ActivityLog {
  id           Int          @id @default(autoincrement())
  activityType ActivityType
  staffId      Int?
  agencyId     Int?
  details      String?
  staffRole    Role
  createdAt    DateTime     @default(now())

  // Relations
  staff  User?   @relation(fields: [staffId], references: [id])
  agency Agency? @relation(fields: [agencyId], references: [id])

  @@map("activity_logs")
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Notification {
  id             Int      @id @default(autoincrement())
  message        String   @db.VarChar(255)
  agencyId       Int      @db.Integer
  destinataireId Int?     @db.Integer
  clientId       Int?     @db.Integer
  envoiId        Int      @db.Integer
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations

  agency                   Agency @relation(fields: [agencyId], references: [id])
  envoi                    Envoi  @relation(fields: [envoiId], references: [id])
  destinataireNotification User?  @relation("NotificationDestinataire", fields: [destinataireId], references: [id])

  clientNotification User? @relation("NotificationClient", fields: [clientId], references: [id])

  @@map("notifications")
}

// [REMOVED: The entire UserAddress model was removed as requested]

model VatRate {
  id          Int      @id @default(autoincrement())
  countryId   Int
  itemClassId Int
  vatPercent  Decimal  @db.Decimal(5, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vatType     VatType? @default(STANDARD)
  country     Country  @relation(fields: [countryId], references: [id])

  @@unique([countryId])
  @@map("vat_rates")
}

model City {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100) // Nom de la ville
  latitude  String? @db.VarChar(20) // Latitude
  longitude String? @db.VarChar(20) // Longitude
  countryId Int

  // Relation
  country   Country   @relation(fields: [countryId], references: [id])
  addresses Address[]

  @@unique([name, countryId]) // UnicitÃ© ville-pays
  @@map("cities")
}

model Country {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100) // Nom du pays
  iso2      String  @unique @db.VarChar(2) // Code ISO-2 (AF, FR, BE)
  iso3      String  @unique @db.VarChar(3) // Code ISO-3 (AFG, FRA, BEL)
  phonecode String  @db.VarChar(10) // Indicatif tÃ©lÃ©phonique
  capital   String? @db.VarChar(50) // Capitale
  currency  String? @db.VarChar(10) // Code de la monnaie (AFN, EUR)
  latitude  String? @db.VarChar(20) // Latitude du pays
  longitude String? @db.VarChar(20) // Longitude du pays
  emoji     String? @db.VarChar(5) // ðŸ‡¦ðŸ‡«, ðŸ‡«ðŸ‡·, ðŸ‡²ðŸ‡¦ (facultatif)

  // Relations
  cities    City[]
  timezones Timezone[]
  vatRates  VatRate[]

  @@map("countries")
}

model Timezone {
  id           Int    @id @default(autoincrement())
  zoneName     String @db.VarChar(50)
  gmtOffset    Int
  abbreviation String @db.VarChar(10)
  countryId    Int

  // Relations
  country Country @relation(fields: [countryId], references: [id])

  @@unique([zoneName, countryId])
  @@map("timezones")
}

model UserAddress {
  id          Int         @id @default(autoincrement())
  userId      Int
  addressId   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  addressType AddressType

  // Relations
  address Address @relation(fields: [addressId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("user_addresses")
}

model Address {
  id            Int           @id @default(autoincrement())
  street        String        @db.VarChar(100)
  complement    String?       @db.VarChar(100)
  streetNumber  String?       @db.VarChar(10)
  boxNumber     String?       @db.VarChar(10)
  cityId        Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  city          City          @relation(fields: [cityId], references: [id])
  userAddresses UserAddress[]
  agency        Agency?

  @@map("addresses")
}

model Agency {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(50)
  location       String?  @db.VarChar(250)
  phoneNumber    String?  @db.VarChar(50)
  email          String?  @db.VarChar(250)
  vatNumber      String?  @db.VarChar(250)
  addressId      Int      @unique
  capacity       Int?     @db.Integer
  availableSlots Int?     @db.Integer
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  // Relations
  createdById    Int? // Nullable in case user gets deleted
  createdBy      User?   @relation(fields: [createdById], references: [id])
  arrivalEnvoi   Envoi[] @relation("ArrivalAgency")
  departureEnvoi Envoi[] @relation("DepartureAgency")

  notifications Notification[]
  appointments  Appointment[]
  transports    Transport[]
  tarifs        Tarifs[]
  address       Address        @relation(fields: [addressId], references: [id])

  agencyClients AgencyClients[]
  agencyStaff   AgencyStaff[]
  activityLogs  ActivityLog[]

  //  Interdire les doublons de noms dans une mÃªme ville
  @@unique([name, addressId])
  @@map("agencies")
}

model ClientDestinataire {
  id             Int      @id @default(autoincrement())
  clientId       Int
  destinataireId Int
  createdAt      DateTime @default(now())

  // Relations
  client       User @relation("Client", fields: [clientId], references: [id])
  destinataire User @relation("Destinataire", fields: [destinataireId], references: [id])

  @@unique([clientId, destinataireId])
  @@map("clients_destinataires")
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  couponCode         String    @db.VarChar(50)
  discountAmount     Decimal   @db.Decimal(10, 2)
  discountPercentage Decimal   @db.Decimal(5, 2)
  numberOfUses       Int
  startDate          DateTime  @db.Timestamp(3)
  expirationDate     DateTime? @db.Timestamp(3)
  termsAndConditions String?   @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations

  userCoupon  UserCoupon[]
  envoiCoupon EnvoiCoupon[]

  @@map("coupons")
}

model UserCoupon {
  userId   Int
  couponId Int

  // Relations

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([userId, couponId])
  @@map("user_coupons")
}

model Transport {
  id            Int     @id @default(autoincrement())
  number        String  @db.VarChar(15)
  baseVolume    Decimal @db.Decimal(12, 2)
  baseWeight    Decimal @db.Decimal(10, 2)
  currentVolume Decimal @db.Decimal(12, 2)
  currentWeight Decimal @db.Decimal(10, 2)
  isAvailable   Boolean @default(true)
  agencyId      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  envois             Envoi[]
  transportSchedules TransportSchedule[]
  agency             Agency?             @relation(fields: [agencyId], references: [id])

  @@map("transports")
}

model Envoi {
  id             Int     @id @default(autoincrement())
  trackingNumber String? @unique @db.VarChar(50)
  qrCodeUrl      String? @default("") @db.VarChar(255)
  userId         Int?
  destinataireId Int?
  transportId    Int?

  departureAgencyId Int
  arrivalAgencyId   Int

  simulationStatus SimulationStatus @default(DRAFT)
  envoiStatus      EnvoiStatus      @default(PENDING)

  totalWeight   Float
  totalVolume   Float
  totalPrice    Float
  paid          Boolean  @default(false)
  departureDate DateTime
  arrivalDate   DateTime

  verificationToken String  @unique @default(uuid()) @db.Uuid
  comment           String? @default("No comment provided yet!") @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  arrivalAgency   Agency     @relation("ArrivalAgency", fields: [arrivalAgencyId], references: [id])
  departureAgency Agency     @relation("DepartureAgency", fields: [departureAgencyId], references: [id])
  transport       Transport? @relation(fields: [transportId], references: [id], onDelete: Cascade)

  destinataire User? @relation("DestinataireEnvoi", fields: [destinataireId], references: [id])
  client       User? @relation("ClientEnvoi", fields: [userId], references: [id])

  envoiCoupons   EnvoiCoupon[]
  parcels        Parcel[]
  appointments   Appointment?
  notifications  Notification[]
  payment        Payment?
  trackingEvents TrackingEvent[]

  @@map("envois")
}

model TrackingEvent {
  id          Int                 @id @default(autoincrement())
  envoiId     Int
  eventStatus TrackingEventStatus
  location    String? // Ville, pays ou coordonnÃ©es GPS
  description String?
  createdAt   DateTime            @default(now())

  envoi Envoi @relation(fields: [envoiId], references: [id])

  @@map("tracking_events")
}

model Appointment {
  id        Int               @id @default(autoincrement())
  envoiId   Int               @unique
  agencyId  Int
  date      DateTime          @db.Timestamp(3)
  status    AppointmentStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations

  envoi  Envoi  @relation(fields: [envoiId], references: [id])
  agency Agency @relation(fields: [agencyId], references: [id])

  @@map("appointments")
}

model EnvoiCoupon {
  envoiId  Int
  couponId Int

  // Relations
  envoi  Envoi  @relation(fields: [envoiId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@id([envoiId, couponId])
  @@map("envoi_coupons")
}

model Parcel {
  id        Int      @id @default(autoincrement())
  envoiId   Int
  height    Decimal  @db.Decimal(5, 2)
  weight    Decimal  @db.Decimal(5, 2)
  width     Decimal  @db.Decimal(5, 2)
  length    Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  envoi Envoi @relation(fields: [envoiId], references: [id])

  @@map("parcels")
}

model Tarifs {
  id         Int      @id @default(autoincrement())
  agencyId   Int?
  weightRate Decimal  @db.Decimal(5, 2)
  volumeRate Decimal  @db.Decimal(5, 2)
  baseRate   Decimal  @db.Decimal(5, 2)
  fixedRate  Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations

  agency Agency? @relation(fields: [agencyId], references: [id])

  @@map("tarifs")
}

model TransportSchedule {
  id            Int      @id @default(autoincrement())
  transportId   Int
  departureDate DateTime @db.Timestamp(3)
  arrivalDate   DateTime @db.Timestamp(3)
  isHoliday     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations

  transport Transport @relation(fields: [transportId], references: [id])

  @@map("transport_schedules")
}
